name: Security Scan

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches:
      - master  # Scan on master branch
  pull_request:
    branches:
      - master  # Scan on PRs

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:

  # Semgrep static analysis for code quality and security
  semgrep-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          # Install semgrep
          python -m pip install semgrep
          
          # Run semgrep with critical security rules only
          echo "Running Semgrep scan for critical security issues..."
          semgrep scan \
            --config p/security-audit \
            --config p/secrets \
            --config p/owasp-top-ten \
            --severity ERROR \
            --output semgrep-results.sarif \
            --sarif \
            --quiet || true
          
          # Generate markdown report
          echo "Generating security report..."
          if [ -f "semgrep-results.sarif" ]; then
            echo "# 🔍 Security Scan Report" > security-report.md
            echo "" >> security-report.md
            echo "## Summary" >> security-report.md
            echo "" >> security-report.md
            
            # Count findings
            TOTAL_FINDINGS=$(jq '.runs[0].results | length' semgrep-results.sarif)
            echo "- **Total Issues Found**: $TOTAL_FINDINGS" >> security-report.md
            echo "- **Scan Date**: $(date)" >> security-report.md
            echo "- **Files Scanned**: $(find . -name "*.yaml" -o -name "*.yml" -o -name "*.sh" | wc -l)" >> security-report.md
            echo "" >> security-report.md
            
            if [ "$TOTAL_FINDINGS" -gt 0 ]; then
              echo "## 🚨 Critical Security Issues" >> security-report.md
              echo "" >> security-report.md
              
              # Group findings by file
              jq -r '.runs[0].results | group_by(.locations[0].physicalLocation.artifactLocation.uri) | .[] | "### 📁 " + .[0].locations[0].physicalLocation.artifactLocation.uri + "\n\n" + (.[] | "- **Line " + (.locations[0].physicalLocation.region.startLine | tostring) + "**: " + .rule.id + "\n  - " + .message.text + "\n") + "\n"' semgrep-results.sarif >> security-report.md
              
              echo "## 🔧 Recommendations" >> security-report.md
              echo "" >> security-report.md
              echo "1. **Command Injection**: Convert workflow parameters to environment variables" >> security-report.md
              echo "2. **Input Validation**: Validate all user inputs before using in commands" >> security-report.md
              echo "3. **Secret Management**: Use secure secret management practices" >> security-report.md
              echo "4. **Code Review**: Review all identified issues before deployment" >> security-report.md
              echo "" >> security-report.md
            else
              echo "## ✅ No Critical Issues Found" >> security-report.md
              echo "" >> security-report.md
              echo "Great job! No critical security vulnerabilities were detected." >> security-report.md
            fi
            
            echo "## 📋 Scan Details" >> security-report.md
            echo "" >> security-report.md
            echo "- **Tool**: Semgrep Community Rules" >> security-report.md
            echo "- **Rules Applied**: Security Audit, Secrets Detection, OWASP Top 10" >> security-report.md
            echo "- **Severity Level**: ERROR (Critical)" >> security-report.md
            echo "" >> security-report.md
            
            cat security-report.md
          else
            echo "No SARIF file generated - no issues found or scan failed"
          fi

      - name: Check if SARIF file exists
        run: |
          if [ -f "semgrep-results.sarif" ]; then
            echo "SARIF file found with security findings"
          else
            echo "No SARIF file generated, creating empty one"
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json", "runs": []}' > semgrep-results.sarif
          fi

      - name: Comment PR with Semgrep results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '';
            
            try {
              if (fs.existsSync('security-report.md')) {
                comment = fs.readFileSync('security-report.md', 'utf8');
              } else if (fs.existsSync('semgrep-results.sarif')) {
                const sarifData = JSON.parse(fs.readFileSync('semgrep-results.sarif', 'utf8'));
                const results = sarifData.runs?.[0]?.results || [];
                
                comment = '🔍 **Semgrep Security Scan Results**\n\n';
                
                if (results.length === 0) {
                  comment += '✅ **No critical security issues found**\n\n';
                  comment += 'The scan checked for critical vulnerabilities and found none.';
                } else {
                  comment += `⚠️ **Found ${results.length} critical security issues**\n\n`;
                  comment += 'Please review the workflow logs for detailed findings.';
                }
              } else {
                comment = '✅ **Security scan completed**\n\nNo critical issues found.';
              }
            } catch (error) {
              comment = '❌ **Error processing scan results**\n\nPlease check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # YAML linting and validation
  yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: |
          yamllint -f parsable . > yamllint-results.txt || true

      - name: Comment PR with YAML lint results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '🔍 **YAML Linting Results**\n\n';
            
            try {
              if (fs.existsSync('yamllint-results.txt')) {
                const yamlResults = fs.readFileSync('yamllint-results.txt', 'utf8').trim();
                
                if (!yamlResults) {
                  comment += '✅ **No YAML linting issues found**\n\n';
                  comment += 'All YAML files follow best practices and are properly formatted.';
                } else {
                  const issues = yamlResults.split('\n').filter(line => line.trim());
                  comment += `⚠️ **Found ${issues.length} YAML linting issues**\n\n`;
                  comment += '**Issues found:**\n';
                  
                  issues.slice(0, 10).forEach((issue, index) => {
                    comment += `${index + 1}. \`${issue}\`\n`;
                  });
                  
                  if (issues.length > 10) {
                    comment += `... and ${issues.length - 10} more issues\n\n`;
                  }
                  
                  comment += '💡 Run `yamllint .` locally to see all issues.';
                }
              } else {
                comment += '✅ **No YAML linting issues found**\n\n';
                comment += 'All YAML files follow best practices and are properly formatted.';
              }
            } catch (error) {
              comment += '❌ **Error processing YAML lint results**\n\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Summary job to combine all scan results
  scan-summary:
    runs-on: ubuntu-latest
    needs: [semgrep-scan, yaml-lint]
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment PR with scan summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const needs = context.job;
            let summary = '## 🔍 **Security Scan Summary**\n\n';
            
            summary += '**Scans completed:**\n';
            summary += '- ✅ Semgrep static analysis\n';
            summary += '- ✅ YAML linting\n\n';
            
            if (needs.result === 'success') {
              summary += '🎉 **All security scans passed successfully!**\n\n';
              summary += 'Your code has been scanned for:\n';
              summary += '- Code security issues\n';
              summary += '- Secret leaks\n';
              summary += '- Security best practices\n';
              summary += '- YAML formatting issues\n\n';
              summary += '🔗 View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
            } else {
              summary += '⚠️ **Some security scans found issues**\n\n';
              summary += 'Please review the individual scan comments above for details.\n\n';
              summary += '🔗 View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
