name: Security Scan

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches:
      - master  # Scan on master branch
  pull_request:
    branches:
      - master  # Scan on PRs

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:

  # Semgrep static analysis for code quality and security
  semgrep-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          # Install semgrep
          python -m pip install semgrep
          
          # Show what files we're scanning
          echo "Scanning files in current directory:"
          find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.sh" -o -name "*.py" -o -name "*.json" \) | head -10
          
          # Run semgrep with verbose output first to see what's happening
          echo "Running Semgrep scan..."
          semgrep scan \
            --config p/security-audit,p/secrets,p/owasp-top-ten,p/bandit,p/flask,p/django,p/jwt,p/kubernetes,p/dockerfile,p/yaml,p/json,p/shell \
            --output semgrep-results.sarif \
            --sarif \
            --verbose || true
          
          # Check if SARIF file was created and show its size
          if [ -f "semgrep-results.sarif" ]; then
            echo "SARIF file created, size: $(wc -c < semgrep-results.sarif) bytes"
            echo "First 200 characters of SARIF file:"
            head -c 200 semgrep-results.sarif
          else
            echo "No SARIF file created"
          fi
          
          # Also run semgrep without SARIF to see findings in logs
          echo "Running Semgrep again to show findings in logs:"
          semgrep scan \
            --config p/security-audit,p/secrets,p/owasp-top-ten,p/bandit,p/flask,p/django,p/jwt,p/kubernetes,p/dockerfile,p/yaml,p/json,p/shell \
            --json || true

      - name: Check if SARIF file exists
        run: |
          if [ -f "semgrep-results.sarif" ]; then
            echo "SARIF file found, will upload to GitHub Security tab"
          else
            echo "No SARIF file generated, creating empty one"
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0-rtm.5.json", "runs": []}' > semgrep-results.sarif
          fi

      - name: Upload Semgrep scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'semgrep-results.sarif'

      - name: Comment PR with Semgrep results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = 'üîç **Semgrep Static Analysis Results**\n\n';
            
            try {
              if (fs.existsSync('semgrep-results.sarif')) {
                const sarifData = JSON.parse(fs.readFileSync('semgrep-results.sarif', 'utf8'));
                const results = sarifData.runs?.[0]?.results || [];
                
                if (results.length === 0) {
                  comment += '‚úÖ **No security issues found in code**\n\n';
                  comment += 'The scan checked for:\n';
                  comment += '- OWASP Top 10 vulnerabilities\n';
                  comment += '- Security best practices\n';
                  comment += '- Secret leaks in code\n';
                  comment += '- Common misconfigurations\n';
                  comment += '- Kubernetes security issues\n';
                  comment += '- Docker security best practices';
                } else {
                  const criticalHigh = results.filter(r => r.level === 'error' || r.level === 'warning');
                  const info = results.filter(r => r.level === 'note');
                  
                  comment += `‚ö†Ô∏è **Found ${results.length} code quality/security issues**\n\n`;
                  
                  if (criticalHigh.length > 0) {
                    comment += `**Critical/High Priority (${criticalHigh.length}):**\n`;
                    criticalHigh.slice(0, 5).forEach((result, index) => {
                      const rule = result.rule?.id || 'Unknown';
                      const message = result.message?.text || 'No description';
                      const location = result.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown file';
                      comment += `${index + 1}. **${rule}** in \`${location}\`\n`;
                      comment += `   ${message}\n\n`;
                    });
                    
                    if (criticalHigh.length > 5) {
                      comment += `... and ${criticalHigh.length - 5} more critical/high issues\n\n`;
                    }
                  }
                  
                  if (info.length > 0) {
                    comment += `**Info/Suggestions (${info.length}):**\n`;
                    comment += `${info.length} additional code quality suggestions found.\n\n`;
                  }
                  
                  comment += 'üîó View full results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
                }
              } else {
                comment += '‚úÖ **No security issues found in code**\n\n';
                comment += 'The scan completed successfully with no issues detected.';
              }
            } catch (error) {
              comment += '‚ùå **Error processing scan results**\n\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # YAML linting and validation
  yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: |
          yamllint -f parsable . > yamllint-results.txt || true

      - name: Comment PR with YAML lint results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = 'üîç **YAML Linting Results**\n\n';
            
            try {
              if (fs.existsSync('yamllint-results.txt')) {
                const yamlResults = fs.readFileSync('yamllint-results.txt', 'utf8').trim();
                
                if (!yamlResults) {
                  comment += '‚úÖ **No YAML linting issues found**\n\n';
                  comment += 'All YAML files follow best practices and are properly formatted.';
                } else {
                  const issues = yamlResults.split('\n').filter(line => line.trim());
                  comment += `‚ö†Ô∏è **Found ${issues.length} YAML linting issues**\n\n`;
                  comment += '**Issues found:**\n';
                  
                  issues.slice(0, 10).forEach((issue, index) => {
                    comment += `${index + 1}. \`${issue}\`\n`;
                  });
                  
                  if (issues.length > 10) {
                    comment += `... and ${issues.length - 10} more issues\n\n`;
                  }
                  
                  comment += 'üí° Run `yamllint .` locally to see all issues.';
                }
              } else {
                comment += '‚úÖ **No YAML linting issues found**\n\n';
                comment += 'All YAML files follow best practices and are properly formatted.';
              }
            } catch (error) {
              comment += '‚ùå **Error processing YAML lint results**\n\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Summary job to combine all scan results
  scan-summary:
    runs-on: ubuntu-latest
    needs: [semgrep-scan, yaml-lint]
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment PR with scan summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const needs = context.job;
            let summary = '## üîç **Security Scan Summary**\n\n';
            
            summary += '**Scans completed:**\n';
            summary += '- ‚úÖ Semgrep static analysis\n';
            summary += '- ‚úÖ YAML linting\n\n';
            
            if (needs.result === 'success') {
              summary += 'üéâ **All security scans passed successfully!**\n\n';
              summary += 'Your code has been scanned for:\n';
              summary += '- Code security issues\n';
              summary += '- Secret leaks\n';
              summary += '- Security best practices\n';
              summary += '- YAML formatting issues\n\n';
              summary += 'üîó View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
            } else {
              summary += '‚ö†Ô∏è **Some security scans found issues**\n\n';
              summary += 'Please review the individual scan comments above for details.\n\n';
              summary += 'üîó View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
