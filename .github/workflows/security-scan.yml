name: Security Scan

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches:
      - master  # Scan on master branch
  pull_request:
    branches:
      - master  # Scan on PRs

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  # Trivy vulnerability scanner for dependencies and secrets
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Comment PR with Trivy results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = 'üîç **Trivy Security Scan Results**\n\n';
            
            try {
              const sarifData = JSON.parse(fs.readFileSync('trivy-results.sarif', 'utf8'));
              const results = sarifData.runs?.[0]?.results || [];
              
              if (results.length === 0) {
                comment += '‚úÖ **No critical or high severity vulnerabilities found**\n\n';
                comment += 'The scan checked for:\n';
                comment += '- Dependency vulnerabilities\n';
                comment += '- Secret leaks\n';
                comment += '- Configuration issues\n';
                comment += '- OS package vulnerabilities';
              } else {
                comment += `‚ö†Ô∏è **Found ${results.length} security issues**\n\n`;
                comment += '**Issues found:**\n';
                
                results.slice(0, 10).forEach((result, index) => {
                  const rule = result.rule?.id || 'Unknown';
                  const message = result.message?.text || 'No description';
                  const severity = result.level || 'UNKNOWN';
                  comment += `${index + 1}. **${rule}** (${severity})\n`;
                  comment += `   ${message}\n\n`;
                });
                
                if (results.length > 10) {
                  comment += `... and ${results.length - 10} more issues\n\n`;
                }
                
                comment += 'üîó View full results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
              }
            } catch (error) {
              comment += '‚ùå **Error processing scan results**\n\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Semgrep static analysis for code quality and security
  semgrep-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/bandit
            p/flask
            p/django
            p/jwt
            p/kubernetes
            p/dockerfile
            p/yaml
            p/json
            p/shell
          output-format: sarif
          output-file: semgrep-results.sarif
          error-on-findings: false

      - name: Upload Semgrep scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'semgrep-results.sarif'

      - name: Comment PR with Semgrep results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = 'üîç **Semgrep Static Analysis Results**\n\n';
            
            try {
              const sarifData = JSON.parse(fs.readFileSync('semgrep-results.sarif', 'utf8'));
              const results = sarifData.runs?.[0]?.results || [];
              
              if (results.length === 0) {
                comment += '‚úÖ **No security issues found in code**\n\n';
                comment += 'The scan checked for:\n';
                comment += '- OWASP Top 10 vulnerabilities\n';
                comment += '- Security best practices\n';
                comment += '- Secret leaks in code\n';
                comment += '- Common misconfigurations\n';
                comment += '- Kubernetes security issues\n';
                comment += '- Docker security best practices';
              } else {
                const criticalHigh = results.filter(r => r.level === 'error' || r.level === 'warning');
                const info = results.filter(r => r.level === 'note');
                
                comment += `‚ö†Ô∏è **Found ${results.length} code quality/security issues**\n\n`;
                
                if (criticalHigh.length > 0) {
                  comment += `**Critical/High Priority (${criticalHigh.length}):**\n`;
                  criticalHigh.slice(0, 5).forEach((result, index) => {
                    const rule = result.rule?.id || 'Unknown';
                    const message = result.message?.text || 'No description';
                    const location = result.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown file';
                    comment += `${index + 1}. **${rule}** in \`${location}\`\n`;
                    comment += `   ${message}\n\n`;
                  });
                  
                  if (criticalHigh.length > 5) {
                    comment += `... and ${criticalHigh.length - 5} more critical/high issues\n\n`;
                  }
                }
                
                if (info.length > 0) {
                  comment += `**Info/Suggestions (${info.length}):**\n`;
                  comment += `${info.length} additional code quality suggestions found.\n\n`;
                }
                
                comment += 'üîó View full results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
              }
            } catch (error) {
              comment += '‚ùå **Error processing scan results**\n\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # YAML linting and validation
  yaml-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: pip install yamllint

      - name: Run yamllint
        run: |
          yamllint -f parsable . > yamllint-results.txt || true

      - name: Comment PR with YAML lint results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = 'üîç **YAML Linting Results**\n\n';
            
            try {
              const yamlResults = fs.readFileSync('yamllint-results.txt', 'utf8').trim();
              
              if (!yamlResults) {
                comment += '‚úÖ **No YAML linting issues found**\n\n';
                comment += 'All YAML files follow best practices and are properly formatted.';
              } else {
                const issues = yamlResults.split('\n').filter(line => line.trim());
                comment += `‚ö†Ô∏è **Found ${issues.length} YAML linting issues**\n\n`;
                comment += '**Issues found:**\n';
                
                issues.slice(0, 10).forEach((issue, index) => {
                  comment += `${index + 1}. \`${issue}\`\n`;
                });
                
                if (issues.length > 10) {
                  comment += `... and ${issues.length - 10} more issues\n\n`;
                }
                
                comment += 'üí° Run `yamllint .` locally to see all issues.';
              }
            } catch (error) {
              comment += '‚ùå **Error processing YAML lint results**\n\n';
              comment += 'Please check the workflow logs for details.';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Summary job to combine all scan results
  scan-summary:
    runs-on: ubuntu-latest
    needs: [trivy-scan, semgrep-scan, yaml-lint]
    if: github.event_name == 'pull_request'
    steps:
      - name: Comment PR with scan summary
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const needs = context.job;
            let summary = '## üîç **Security Scan Summary**\n\n';
            
            summary += '**Scans completed:**\n';
            summary += '- ‚úÖ Trivy vulnerability scan\n';
            summary += '- ‚úÖ Semgrep static analysis\n';
            summary += '- ‚úÖ YAML linting\n\n';
            
            if (needs.result === 'success') {
              summary += 'üéâ **All security scans passed successfully!**\n\n';
              summary += 'Your code has been scanned for:\n';
              summary += '- Dependency vulnerabilities\n';
              summary += '- Secret leaks\n';
              summary += '- Code security issues\n';
              summary += '- YAML formatting issues\n\n';
              summary += 'üîó View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
            } else {
              summary += '‚ö†Ô∏è **Some security scans found issues**\n\n';
              summary += 'Please review the individual scan comments above for details.\n\n';
              summary += 'üîó View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)';
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
